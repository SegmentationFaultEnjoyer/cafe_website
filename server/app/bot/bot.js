const { Telegraf } = require('telegraf');
const fs = require('fs');
const { join } = require("path");
require("dotenv").config();


const bot = new Telegraf(process.env.BOT_TOKEN)
bot.start((ctx) => {
    checkPersons(ctx);
})
bot.launch();
console.log("Bot started");



module.exports.messageBroadcaster = async function (message) {
    try {
        const rawData = fs.readFileSync(join(__dirname, "persons.json"));
        let jsonObj = JSON.parse(rawData);
        const parsedMessage = parsingMessage(message);
        for (let userID of jsonObj.users) {
            console.log(userID);
            
            await bot.telegram.sendMessage(userID, parsedMessage, { parse_mode: 'HTML' });
        }
        console.log(parsedMessage)
        return "ok";
    } catch (err) {
        throw err;
    }
}

function checkPersons(ctx) {
    const rawData = fs.readFileSync(join(__dirname, "persons.json"));
    let jsonObj = JSON.parse(rawData);
    if (jsonObj.users.length === 0 || !jsonObj.users.includes(ctx.update.message.chat.id)) {
        jsonObj.users.push(ctx.update.message.chat.id);
        fs.writeFileSync(join(__dirname, "persons.json"), JSON.stringify(jsonObj));
        ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∫–æ–º–∞–Ω–¥–∏');
        return;
    }
    ctx.reply("–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º");
}




function parsingMessage(message) {
    let str = "";
    let count = 1;
    str += `<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> ${message.order_id}\n\n`;
    console.table(message);
    for (let i of message.contains) {
        
        
        str += `${count}. <u>${i.name}</u> - <i>${i.amount} —à—Ç.</i> \n`;
        str += `–¶—ñ–Ω–∞: <i> ${i.price} –≥—Ä–Ω</i>  \n`;
        
        if (i.extras != null) {
            str += "–î–æ–¥–∞—Ç–∫–∏: \n";
            for (let extraItem of i.extras) {
                str += `\t\t‚Ä¢<i>${extraItem.name} ${extraItem.amount} —à—Ç. üí¥ ${extraItem.price} –≥—Ä–Ω </i>\n`;
            }

        }
        if (i.option != null && i.option.length != 0) {
            let tmpstr = "";
            for (let opt of i.option) {
                tmpstr +=`\t\t‚Ä¢<i>${opt.name}: ${opt.pickedOption}</i>\n`;
            }
            str += `–û–ø—Ü—ñ—ó:\n${tmpstr}`;
        }
        str += `–í–∞—Ä—Ç—ñ—Å—Ç—å: <i>${i.totalPrice}</i> –≥—Ä–Ω\n`
        str += "=========================" + '\n';
        count++;
    }
    const orderPayMethod = message.payment ? "–ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É" : "–∑–¥—ñ–π—Å–Ω–µ–Ω–∞ –Ω–∞ —Å–∞–π—Ç—ñ";

    str += `–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: <b>${orderPayMethod}</b> \n`;
    str += `–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: <b>${message.totalPrice} –≥—Ä–Ω </b> üí∞ \n\n`;

    str += "<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–Ω–∏–∫–∞</b>\n";
    str += "–Ü–º'—è: " + message.customerInfo.name + "\n";
    str += "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: " + message.customerInfo.phoneNumber + "\n";
    str += "–ê–¥—Ä–µ—Å–∞: " + message.customerInfo.addres;


    return str;

}